{
package newPeg
}

Command <- command:Statement rest:((_ Statement)* _ TOK_SEMICOLON){
        commands := []interface{}{(command.([]interface{}))}
        for _,val := range(cast.ToIfaceSlice(rest)){
        		_,ok := val.([]interface{})
        		if ok{
        			newVal := val.([]interface{})
        			if len(newVal)>0{
        				for _,item := range(newVal){
        					_,ok := item.([]interface{})
        					if ok{
        						for _,subItem := range cast.ToIfaceSlice(item){
        							_,ok := subItem.([]interface{})
        							if ok{
        								castedSubItem := cast.ToIfaceSlice(subItem)
        								if len(castedSubItem)>0{
        										commands = append(commands,castedSubItem)

    									}
    								}
    							}
    						}
    					}

        			}
        		}
        	}
            return commands,nil
    }



Statement <- statement:Source rest:((_ "|" _ statement:Transform)* _"|"_ statement:Sink _ TOK_SEMICOLON){
    stages := []interface{}{statement}
    	rst := cast.ToIfaceSlice(rest)
    	for _,val := range(rst){

    		_,ok := val.([]interface{})
    		if ok {
    			newVal := cast.ToIfaceSlice(val)

    			if len(newVal) > 0 {
    				firstVal := newVal[0]
    				_, ok1 := firstVal.([]interface{})
    				if ok1 {
    					finalVal := cast.ToIfaceSlice(firstVal)
    					if len(finalVal) == 4 {
    						stages = append(stages, finalVal[3])
    					}
    				}
    			}

    		}else{
    			_,ok:= val.([]uint8)
    			if !ok{
    				stages = append(stages,val)

    			}

    		}

    	}

    	return stages,nil
}


Source <- BranchJobG/FileJobG

Transform <- AggJobG/DoJobG

Sink <- StdOutG/SinkInto

//Source Jobs

FileJobG <- _ "file(" _ filename:FileName _ ")" {
    if fname, ok := cast.TryString(filename); ok {
        return SourceJob{Type: FILEJOB,OperateOn:SrcFile{fileName:fname}},nil
    }
    return nil, errors.New("could not decode source file name")
}

BranchJobG <- "branch"_"(" _ br:IDENTIFIER ")"{
    if branchName,ok := cast.TryString(br);ok{
    return SourceJob{Type:BRANCHJOB,OperateOn:SrcBranch{identifier:branchName}},nil
    }
    return nil,errors.New("could not identify the branch name")
}

//End Source Jobs



//Transform jobs
//All related to the aggregator transform
AggJobG <- "agg" _ params:AggGroupBy? _ job:AggJobs rest:("," _ AggJobs)* {
        jobSlices := cast.ToIfaceSlice(rest)
        jobs := []interface{}{job}

        for _, v := range jobSlices {
                j := cast.ToIfaceSlice(v)
                jobs = append(jobs, j[2])
        }

        ps, _ := params.([]string)
        return TransformJob{Type:AGGJOB,OperateOn:AggNodeJob{Functions:jobs,GroupBy: ps}},nil

}


AggJobs <- CountAgg / MaxAgg / MinAgg / AvgAgg / SumAgg / ModeAgg
          / VarAgg / DistinctCountAgg / QuantileAgg / MedianAgg / QuartileAgg
          / CovAgg / CorrAgg / PValueAgg

//all aggregator related jobs
CountAgg <- alias:EqAliasG _ "count(" _ args:FilterMulti? _ ")"{
    name,filter,err := parseAggArgs(alias,args)
    if err !=nil{
    return nil,err
    }
    return Count{Alias:name,Filter:filter},nil
}
MaxAgg <- alias:EqAliasG? _ "max(" _ field:Variable _ args:("," _ FilterMulti)? _ ")" {

    var name string
    var filter Filter
    var err error

    if args != nil {
        if ags := cast.ToIfaceSlice(args); ags != nil {
            name, filter, err = parseAggArgs(alias, ags[2])
        }
    } else {
        name, filter, err = parseAggArgs(alias, nil)
    }

    if err != nil {
        return nil, err
    }

    fld, _ := cast.TryString(field)
    return Max{Alias: name, Field: fld, Filter: filter}, nil
}

MinAgg <- alias:EqAliasG? _ "min(" _ field:Variable _ args:("," _ FilterMulti)? _ ")" {

    var name string
    var filter Filter
    var err error

    if args != nil {
        if ags := cast.ToIfaceSlice(args); ags != nil {
            name, filter, err = parseAggArgs(alias, ags[2])
        }
    } else {
        name, filter, err = parseAggArgs(alias, nil)
    }

    if err != nil {
        return nil, err
    }

    fld, _ := cast.TryString(field)
    return Min{Alias: name, Field: fld, Filter: filter}, nil
}

AvgAgg <- alias:EqAliasG? _ "avg(" _ field:Variable _ args:("," _ FilterMulti)? _ ")" {

    var name string
    var filter Filter
    var err error

    if args != nil {
        if ags := cast.ToIfaceSlice(args); ags != nil {
            name, filter, err = parseAggArgs(alias, ags[2])
        }
    } else {
        name, filter, err = parseAggArgs(alias, nil)
    }

    if err != nil {
        return nil, err
    }

    fld, _ := cast.TryString(field)
    return Avg{Alias: name, Field: fld, Filter: filter}, nil
}

SumAgg <- alias:EqAliasG? _ "sum(" _ field:Variable _ args:("," _ FilterMulti)? _ ")" {

    var name string
    var filter Filter
    var err error

    if args != nil {
        if ags := cast.ToIfaceSlice(args); ags != nil {
            name, filter, err = parseAggArgs(alias, ags[2])
        }
    } else {
        name, filter, err = parseAggArgs(alias, nil)
    }

    if err != nil {
        return nil, err
    }

    fld, _ := cast.TryString(field)
    return Sum{Alias: name, Field: fld, Filter: filter}, nil
}

VarAgg <- alias:EqAliasG? _ "var(" _ field:Variable _ args:("," _ FilterMulti)? _ ")" {

    var name string
    var filter Filter
    var err error

    if args != nil {
        if ags := cast.ToIfaceSlice(args); ags != nil {
            name, filter, err = parseAggArgs(alias, ags[2])
        }
    } else {
        name, filter, err = parseAggArgs(alias, nil)
    }

    if err != nil {
        return nil, err
    }

    fld, _ := cast.TryString(field)
    return Variance{Alias: name, Field: fld, Filter: filter}, nil
}

DistinctCountAgg <- alias:EqAliasG? _ "dcount(" _ field:Variable _ args:("," _ FilterMulti)? _ ")" {

    var name string
    var filter Filter
    var err error

    if args != nil {
        if ags := cast.ToIfaceSlice(args); ags != nil {
            name, filter, err = parseAggArgs(alias, ags[2])
        }
    } else {
        name, filter, err = parseAggArgs(alias, nil)
    }

    if err != nil {
        return nil, err
    }

    fld, _ := cast.TryString(field)
    return DistinctCount{Alias: name, Field: fld, Filter: filter}, nil
}

ModeAgg <- alias:EqAliasG? _ "mode(" _ field:Variable _ args:("," _ FilterMulti)? _ ")" {

    var name string
    var filter Filter
    var err error

    if args != nil {
        if ags := cast.ToIfaceSlice(args); ags != nil {
            name, filter, err = parseAggArgs(alias, ags[2])
        }
    } else {
        name, filter, err = parseAggArgs(alias, nil)
    }

    if err != nil {
        return nil, err
    }

    fld, _ := cast.TryString(field)
    return Mode{Alias: name, Field: fld, Filter: filter}, nil
}

QuantileAgg <- alias:EqAliasG? _ "quantile(" _ field:Variable _  weight:("," _ Variable)? _ "," _ qth:Float _ args:("," _ FilterMulti)? _ ")" {

    var name string
    var filter Filter
    var err error

    if args != nil {
        if ags := cast.ToIfaceSlice(args); ags != nil {
            name, filter, err = parseAggArgs(alias, ags[2])
        }
    } else {
        name, filter, err = parseAggArgs(alias, nil)
    }

    if err != nil {
        return nil, err
    }

    wt := ""
    if weight != nil {
        w := cast.ToIfaceSlice(weight)
        wt, _ = cast.TryString(w[2])
    }

    q, _ := cast.TryFloat(qth)

    fld, _ := cast.TryString(field)
    return Quantile{Alias: name, Field: fld, Filter: filter, Weight: wt, Qth: q}, nil
}

MedianAgg <- alias:EqAliasG? _ "median(" _ field:Variable _  weight:("," _ Variable)? _ args:("," _ FilterMulti)? _ ")" {

    var name string
    var filter Filter
    var err error

    if args != nil {
        if ags := cast.ToIfaceSlice(args); ags != nil {
            name, filter, err = parseAggArgs(alias, ags[2])
        }
    } else {
        name, filter, err = parseAggArgs(alias, nil)
    }

    if err != nil {
        return nil, err
    }

    wt := ""
    if weight != nil {
        w := cast.ToIfaceSlice(weight)
        wt, _ = cast.TryString(w[2])
    }

    if name == "" {
        name = "median"
    }

    fld, _ := cast.TryString(field)
    return Quantile{Alias: name, Field: fld, Filter: filter, Weight: wt, Qth: float64(0.5)}, nil
}

QuartileAgg <- alias:EqAliasG? _ "quartile(" _ field:Variable _  weight:("," _ Variable)? _ "," _ qth:Number _ args:("," _ FilterMulti)? _ ")" {

    var name string
    var filter Filter
    var err error

    if args != nil {
        if ags := cast.ToIfaceSlice(args); ags != nil {
            name, filter, err = parseAggArgs(alias, ags[2])
        }
    } else {
        name, filter, err = parseAggArgs(alias, nil)
    }

    if err != nil {
        return nil, err
    }

    wt := ""
    if weight != nil {
        w := cast.ToIfaceSlice(weight)
        wt, _ = cast.TryString(w[2])
    }

    q, _ := cast.TryInt(qth)
    if q < 1 || q > 4 {
        log.Panic("Quartile must be in range (1, 4)")
    }

    if name == "" {
        if trail, ok := posMap[int(q)]; ok {
            name = fmt.Sprintf("%v%s quartile", q, trail)
        } else {
            name = fmt.Sprintf("%vth quartile", q)
        }
    }

    qn := float64(q) * 0.25
    if qn > 1 {
        qn = float64(1)
    }

    fld, _ := cast.TryString(field)
    return Quantile{Alias: name, Field: fld, Filter: filter, Weight: wt, Qth: qn}, nil
}

CovAgg <- alias:EqAliasG? _ "cov(" _ field1:Variable _ "," _ field2:Variable _ args:("," _ FilterMulti)? _ ")" {

    var name string
    var filter Filter
    var err error

    if args != nil {
        if ags := cast.ToIfaceSlice(args); ags != nil {
            name, filter, err = parseAggArgs(alias, ags[2])
        }
    } else {
        name, filter, err = parseAggArgs(alias, nil)
    }

    if err != nil {
        return nil, err
    }

    fld1, _ := cast.TryString(field1)
    fld2, _ := cast.TryString(field2)
    return Covariance{Alias: name, Field1: fld1, Field2: fld2, Filter: filter}, nil
}

CorrAgg <- alias:EqAliasG? _ "correlation(" _ field1:Variable _ "," _ field2:Variable _ args:("," _ FilterMulti)? _ ")" {

    var name string
    var filter Filter
    var err error

    if args != nil {
        if ags := cast.ToIfaceSlice(args); ags != nil {
            name, filter, err = parseAggArgs(alias, ags[2])
        }
    } else {
        name, filter, err = parseAggArgs(alias, nil)
    }

    if err != nil {
        return nil, err
    }

    fld1, _ := cast.TryString(field1)
    fld2, _ := cast.TryString(field2)
    return Correlation{Alias: name, Field1: fld1, Field2: fld2, Filter: filter}, nil
}

PValueAgg <- alias:EqAliasG? _ "pvalue(" _ field1:Variable _ "," _ field2:Variable _ args:("," _ FilterMulti)? _ ")" {

    var name string
    var filter Filter
    var err error

    if args != nil {
        if ags := cast.ToIfaceSlice(args); ags != nil {
            name, filter, err = parseAggArgs(alias, ags[2])
        }
    } else {
        name, filter, err = parseAggArgs(alias, nil)
    }

    if err != nil {
        return nil, err
    }

    fld1, _ := cast.TryString(field1)
    fld2, _ := cast.TryString(field2)
    return PValue{Alias: name, Field1: fld1, Field2: fld2, Filter: filter}, nil
}



AggGroupBy <- _ "by" _ param:Variable rest:("," _ Variable)* {
    p1, _ := cast.TryString(param)
    params := []string{p1}
    restSlice := cast.ToIfaceSlice(rest)
    for _, v := range restSlice {
            ps := cast.ToIfaceSlice(v)
            p2, _ := cast.TryString(ps[2])
            params = append(params, p2)
    }

    return params, nil
}

//end of aggregator transform

DoJobG <- job:(FilterDo / BranchDo / SelectDo / PickDo / SortDo / BatchDo) {
        return DoNodeJob{Function: job}, nil
}

// Branch Grammar

BranchDo <- "branch(" _ br:BranchPrimary _ ")" {
        if branch, ok := cast.TryString(br); ok {
                return Branch{Condition: branch}, nil
        }
        return nil, errors.New("Could not decode branch syntax")
}

BranchPrimary <- name:Expr _ op:BranchPriOp _ value:(Value) {
        return string(c.text), nil
}

BranchPriOp <- FilterPriOp
// Select Grammar

SelectDo <- "select(" _ field:Variable _ rest:("," _ Variable)* _ ")"  {
    fld, _ := cast.TryString(field)
    fields := []string{ fld }

    rst := cast.ToIfaceSlice(rest)
    for _, r := range rst {
        rstVal := cast.ToIfaceSlice(r)
        fld, _ := cast.TryString(rstVal[2])
        fields = append(fields, fld)
    }

    return Select{Fields: fields}, nil
}

// Pick Grammar
PickDo <- "pick" _ desc:Variable "(" _ num:Number _ ")" {
    n, _ := cast.TryInt(num)
    if n < 0 {
        log.Panic("Can't take less than 0 items")
    }

    dsc, _ := cast.TryString(desc)

    return Pick{Desc: dsc, Num: uint64(n)}, nil
}

// Sort Grammar
SortDo <- "sort()" _ "by" _ alias:Variable {
    fld, _ := cast.TryString(alias)
    return Sort{Field: fld}, nil
}

// Batch Grammar
BatchDo <- "batch(" _ num:Number? _ ")" {
    n := int64(-1)
    if num != nil {
        n, _ = cast.TryInt(num)
    }
    return Batch{Num: n}, nil
}

// Filter Grammar

FilterDo <- "filter(" _ filt:FilterMulti _ ")" {
        if f, ok := filt.(Filter); ok {
                return TransformJob{Type:FILTER,OperateOn:f}, nil
        }
        return nil, errors.New("Could not parse filter")
}

// A FilterMulti defines a filter that consists of either a single factor or

// multiple factors separated by secondary operators.
FilterMulti <- first:FilterFactor rest:(_ op:FilterSecOp _ f2:FilterFactor)* {
        return newSecondaryFilter(first, rest), nil
}

// A Factor is either a primary filter or a multi filter enclosed by parenthesis
FilterFactor <- '(' sf:FilterMulti ')' {
    return sf, nil
} / pf:FilterPrimary {
    return pf, nil
}

FilterSecOp <- "and" / "or" {
        return string(c.text), nil
}


// A FilterPrimary defines a filter that checks if the value defined by the
// variable is according to the primary operator.
FilterPrimary <- name:Expr _ op:FilterPriOp _ value:Value _ {
        return newPrimaryFilter(name.(string), op, value), nil
}

FilterPriOp <- "==" / "!=" / "<" / ">" / "<=" / ">=" {
        return string(c.text), nil
}
//end Filter grammar


//End Transform Jobs

//Sink Jobs
StdOutG <- "stdout(" _ params:(VarParamListG)? _ ")" {

    if header, ok := params.([]string); ok {
        return SinkJob{
            Type: STDOUT,
            OperateOn:StdOut{Header:header},
            },nil
    }
    return SinkJob{
        Type: STDOUT,
        OperateOn:StdOut{Header:nil},
    }, nil
}

SinkInto <-first:Variable rest:(_ "=" _ "into()"){
    streamTo,_ := first.(string)
    return SinkJob{
        Type: INTO,
        OperateOn:InTo{streamTo:streamTo},
        },nil
    }

//End Sink Jobs


FileName <- Variable ("." ext:Variable)* {
    nm, _ := cast.TryString(string(c.text))

    return nm, nil
}
// Math Grammar
MExpr <- first:MValue rest:(_ MOps _ MValue)* {
        return parseMathExpr(first, rest), nil
}

MValue <- val:(Float / Number / String_Type1 / Variable / MFactor) {
        return val, nil
}

MOps <- "%" / "-" / "+" / "*" / "/" {
        return string(c.text), nil
}

MFactor <- '(' ex:MExpr ')' {

    e, _ := cast.TryString(ex)
    return "(" + e + ")", nil
} / ex:MExpr {
    return ex, nil
}
//end of Math Grammar

// Basic Grammar

Expr <- first:Value rest:(_ MOps _ Value)* {
        return parseMathExpr(first, rest), nil
}

Value <- val:(Float / Number / String_Type1 / Variable) {
        return val, nil
}

Variable <- Letter (Integer / Letter/ "_")* {
        return string(c.text), nil
}

String_Type1 <- '"' ( !EscapedChar . / '\\' EscapeSequence )* '"' {
        c.text = bytes.Replace(c.text, []byte(`\/`), []byte(`/`), -1)
        str,_ := strconv.Unquote(string(c.text))

        return cast.GetStringValue(str), nil
}

EscapedChar <- [\x00-\x1f"\\]

EscapeSequence <- SingleCharEscape

SingleCharEscape <- ["\\/bfnrt]

Word <- (Letter / "_")+ {
        return string(c.text), nil
}

Letter <- [a-z] / [A-Z]

Number <- '-'? Integer {
        return strconv.ParseInt(string(c.text), 10, 64)
}

PositiveNumber <- Integer {
        return strconv.ParseInt(string(c.text), 10, 64)
}

Float <- '-'? Integer? "." Integer {
    return strconv.ParseFloat(string(c.text), 64)
}

Integer <- '0' / NonZeroDecimalDigit DecimalDigit*

DecimalDigit <- [0-9]

NonZeroDecimalDigit <- [1-9]

_ "whitespace" <- [ \t\r\n]*

OneWhiteSpace <- [ \t\r\n]
IDENTIFIER <- Letter (Integer / Letter/ "_")* {
                   return string(c.text), nil
              }
EOF <- !.

TOK_SEMICOLON<- ";"

//End of Basic Grammar

// Parameter List
// Variable Parameters Extraction
VarParamListG <- first:Variable _ rest:("," _ Variable _)* {
    return getParamList(first, rest), nil
}
EqAliasG <- alias:Variable _ "=" {
    if name, ok := cast.TryString(alias); ok {
        return name, nil
    }
    return nil, errors.New("Could not decode alias")
}
