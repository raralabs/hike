{
package peg
}

Main <- agg:Job rest:(_ "|" _ Job)* {
    jobs := []interface{}{agg}
    rst := cast.ToIfaceSlice(rest)

    for _, v := range rst {
        rstJob := cast.ToIfaceSlice(v)
        if len(rstJob) == 4 {
            jobs = append(jobs, rstJob[3])
        }
    }

    return jobs, nil
}


// Basic Grammar

Expr <- Variable ( _ ("%" / "-" / "+" / "*" / "/") _ (Variable_Value / Number))* {
        return string(c.text), nil
}

Value <- val:(Number / String_Type1 / Variable_Literal / Variable_Value) {
        return val, nil
}

Variable <- Letter (Integer / Letter/ "_")* {
        return string(c.text), nil
}

Variable_Value <- "$" vrbl:Variable {
    return vrbl, nil
}

Variable_Literal <- vrbl:Variable {
    vari, _ := cast.TryString(vrbl)
    return cast.GetStringValue(vari), nil
}

String_Type1 <- '"' ( !EscapedChar . / '\\' EscapeSequence )* '"' {
        c.text = bytes.Replace(c.text, []byte(`\/`), []byte(`/`), -1)
        str,_ := strconv.Unquote(string(c.text))

        return cast.GetStringValue(str), nil
}

EscapedChar <- [\x00-\x1f"\\]

EscapeSequence <- SingleCharEscape

SingleCharEscape <- ["\\/bfnrt]

Word <- (Letter / "_")+ {
        return string(c.text), nil
}

Letter <- [a-z] / [A-Z]

Number <- '-'? Integer {
        return strconv.ParseInt(string(c.text), 10, 64)
}

Float <- '-'? Integer? "." Integer {
    return strconv.ParseFloat(string(c.text), 64)
}

Integer <- '0' / NonZeroDecimalDigit DecimalDigit*

DecimalDigit <- [0-9]

NonZeroDecimalDigit <- [1-9]

_ "whitespace" <- [ \t\r\n]*

OneWhiteSpace <- [ \t\r\n]

EOF <- !.

// Jobs

Job <- FileJobG / DoJobG / AggJobG / SinkJobG

FileJobG <- _ "file(" _ filename:FileName _ ")" {
    if fname, ok := cast.TryString(filename); ok {
        return FileJob{Filename: fname}, nil
    }
    return nil, errors.New("could not decode source file name")
}

FileName <- Variable ("." ext:Variable)* {
    nm, _ := cast.TryString(string(c.text))

    return nm, nil
}

DoJobG <- job:(FilterDo / BranchDo / SelectDo / PickDo / SortDo / BatchDo) {
        return DoNodeJob{Function: job}, nil
}

AggJobG <- job:AggJobs rest:("," _ AggJobs)* params:AggGroupBy? {
        jobSlices := cast.ToIfaceSlice(rest)
        jobs := []interface{}{job}

        for _, v := range jobSlices {
                j := cast.ToIfaceSlice(v)
                jobs = append(jobs, j[2])
        }

        ps, _ := params.([]string)

        return AggNodeJob{Functions: jobs, GroupBy: ps}, nil
}

AggJobs <- CountAgg / MaxAgg / MinAgg / AvgAgg / SumAgg / ModeAgg
           / VarAgg / DistinctCountAgg / QuantileAgg / MedianAgg / QuartileAgg
           / CovAgg / CorrAgg / PValueAgg

AggGroupBy <- _ "by " _ param:Variable rest:("," _ Variable)* {
        p1, _ := cast.TryString(param)
        params := []string{p1}

        restSlice := cast.ToIfaceSlice(rest)
        for _, v := range restSlice {
                ps := cast.ToIfaceSlice(v)
                p2, _ := cast.TryString(ps[2])
                params = append(params, p2)
        }

        return params, nil
}

SinkJobG <- StdOutG / BlackHoleG / PlotG

StdOutG <- "stdout()" {
        return SinkJob{Type: "stdout"}, nil
}

BlackHoleG <- "blackhole()" {
        return SinkJob{Type: "blackhole"}, nil
}

PlotG <- "plot " _ widget:(BarWidget) {
    return SinkJob{Type: "plot", Args: widget}, nil
}

BarWidget <- "bar(" _ xField:Variable _ "," _ yField:Variable _ args:("," _ Number _ ("," _ Number)?)? _ ")" _ alias:AliasG? {

    title := "Bar Chart"
	if alias != nil {
		if nm, ok := cast.TryString(alias); ok {
			title = nm
		}
	}

	xfld, _ := cast.TryString(xField)
	yfld, _ := cast.TryString(yField)

	width := int64(3)
	gap := int64(2)
	if args != nil {
	    argSlice := cast.ToIfaceSlice(args)
	    width, _ = cast.TryInt(argSlice[2])

	    gapArg := argSlice[4]
	    if gapArg != nil {
	        gapSlice := cast.ToIfaceSlice(gapArg)
	        gap, _ = cast.TryInt(gapSlice[2])
	    }
	}

	title += "(q to quit)"

	return Plot{Type: "bar", Widget: BarPlot{Title: title, XField: xfld, YField: yfld, BarWidth: int(width), BarGap: int(gap)}}, nil
}


// Filter Grammar

FilterDo <- "filter(" _ filt:FilterMulti _ ")" {
        if f, ok := filt.(Filter); ok {
                return f, nil
        }
        return nil, errors.New("Could not parse filter")
}

// A FilterMulti defines a filter that consists of either a single factor or
// multiple factors separated by secondary operators.
FilterMulti <- first:FilterFactor rest:(_ op:FilterSecOp _ f2:FilterFactor)* {
        return newSecondaryFilter(first, rest), nil
}

// A Factor is either a primary filter or a multi filter enclosed by parenthesis
FilterFactor <- '(' sf:FilterMulti ')' {
    return sf, nil
} / pf:FilterPrimary {
    return pf, nil
}

FilterSecOp <- "and" / "or" {
        return string(c.text), nil
}


// A FilterPrimary defines a filter that checks if the value defined by the
// variable is according to the primary operator.
FilterPrimary <- name:Expr _ op:FilterPriOp _ value:Value _ {
        return newPrimaryFilter(name.(string), op, value), nil
}

FilterPriOp <- "==" / "!=" / "<" / ">" / "<=" / ">=" {
        return string(c.text), nil
}


// Branch Grammar

BranchDo <- "branch(" _ br:BranchPrimary _ ")" {
        if branch, ok := cast.TryString(br); ok {
                return Branch{Condition: branch}, nil
        }
        return nil, errors.New("Could not decode branch syntax")
}

BranchPrimary <- name:Expr _ op:BranchPriOp _ value:(Value) {
        return string(c.text), nil
}

BranchPriOp <- FilterPriOp


// Select Grammar

SelectDo <- "select(" _ field:Variable _ rest:("," _ Variable)* _ ")"  {
    fld, _ := cast.TryString(field)
    fields := []string{ fld }

    rst := cast.ToIfaceSlice(rest)
    for _, r := range rst {
        rstVal := cast.ToIfaceSlice(r)
        fld, _ := cast.TryString(rstVal[2])
        fields = append(fields, fld)
    }

    return Select{Fields: fields}, nil
}

// Pick Grammar
PickDo <- "pick" _ desc:Variable "(" _ num:Number _ ")" {
    n, _ := cast.TryInt(num)
    if n < 0 {
        log.Panic("Can't take less than 0 items")
    }

    dsc, _ := cast.TryString(desc)

    return Pick{Desc: dsc, Num: uint64(n)}, nil
}

// Sort Grammar
SortDo <- "sort()" _ "by" _ alias:Variable {
    fld, _ := cast.TryString(alias)
    return Sort{Field: fld}, nil
}

// Batch Grammar
BatchDo <- "batch(" _ num:Number? _ ")" {

    n := int64(-1)
    if num != nil {
        n, _ = cast.TryInt(num)
    }
    return Batch{Num: n}, nil
}


// Aggregator Functions Grammar

CountAgg <- "count(" _ args:FilterMulti? _ ")" _ alias:AliasG?  {

    name, filter, err := parseAggArgs(alias, args)
    if err != nil {
        return nil, err
    }

    return Count{Alias: name, Filter: filter}, nil
}

MaxAgg <- "max(" _ field:Variable _ args:("," _ FilterMulti)? _ ")" _ alias:AliasG?  {

    var name string
    var filter Filter
    var err error

    if args != nil {
        if ags := cast.ToIfaceSlice(args); ags != nil {
            name, filter, err = parseAggArgs(alias, ags[2])
        }
    } else {
        name, filter, err = parseAggArgs(alias, nil)
    }

    if err != nil {
        return nil, err
    }

    fld, _ := cast.TryString(field)
    return Max{Alias: name, Field: fld, Filter: filter}, nil
}

MinAgg <- "min(" _ field:Variable _ args:("," _ FilterMulti)? _ ")" _ alias:AliasG? {

    var name string
    var filter Filter
    var err error

    if args != nil {
        if ags := cast.ToIfaceSlice(args); ags != nil {
            name, filter, err = parseAggArgs(alias, ags[2])
        }
    } else {
        name, filter, err = parseAggArgs(alias, nil)
    }

    if err != nil {
        return nil, err
    }

    fld, _ := cast.TryString(field)
    return Min{Alias: name, Field: fld, Filter: filter}, nil
}

AvgAgg <- "avg(" _ field:Variable _ args:("," _ FilterMulti)? _ ")" _ alias:AliasG? {

    var name string
    var filter Filter
    var err error

    if args != nil {
        if ags := cast.ToIfaceSlice(args); ags != nil {
            name, filter, err = parseAggArgs(alias, ags[2])
        }
    } else {
        name, filter, err = parseAggArgs(alias, nil)
    }

    if err != nil {
        return nil, err
    }

    fld, _ := cast.TryString(field)
    return Avg{Alias: name, Field: fld, Filter: filter}, nil
}

SumAgg <- "sum(" _ field:Variable _ args:("," _ FilterMulti)? _ ")" _ alias:AliasG? {

    var name string
    var filter Filter
    var err error

    if args != nil {
        if ags := cast.ToIfaceSlice(args); ags != nil {
            name, filter, err = parseAggArgs(alias, ags[2])
        }
    } else {
        name, filter, err = parseAggArgs(alias, nil)
    }

    if err != nil {
        return nil, err
    }

    fld, _ := cast.TryString(field)
    return Sum{Alias: name, Field: fld, Filter: filter}, nil
}

VarAgg <- "var(" _ field:Variable _ args:("," _ FilterMulti)? _ ")" _ alias:AliasG? {

    var name string
    var filter Filter
    var err error

    if args != nil {
        if ags := cast.ToIfaceSlice(args); ags != nil {
            name, filter, err = parseAggArgs(alias, ags[2])
        }
    } else {
        name, filter, err = parseAggArgs(alias, nil)
    }

    if err != nil {
        return nil, err
    }

    fld, _ := cast.TryString(field)
    return Variance{Alias: name, Field: fld, Filter: filter}, nil
}

DistinctCountAgg <- "dcount(" _ field:Variable _ args:("," _ FilterMulti)? _ ")" _ alias:AliasG? {

    var name string
    var filter Filter
    var err error

    if args != nil {
        if ags := cast.ToIfaceSlice(args); ags != nil {
            name, filter, err = parseAggArgs(alias, ags[2])
        }
    } else {
        name, filter, err = parseAggArgs(alias, nil)
    }

    if err != nil {
        return nil, err
    }

    fld, _ := cast.TryString(field)
    return DistinctCount{Alias: name, Field: fld, Filter: filter}, nil
}

ModeAgg <- "mode(" _ field:Variable _ args:("," _ FilterMulti)? _ ")" _ alias:AliasG? {

    var name string
    var filter Filter
    var err error

    if args != nil {
        if ags := cast.ToIfaceSlice(args); ags != nil {
            name, filter, err = parseAggArgs(alias, ags[2])
        }
    } else {
        name, filter, err = parseAggArgs(alias, nil)
    }

    if err != nil {
        return nil, err
    }

    fld, _ := cast.TryString(field)
    return Mode{Alias: name, Field: fld, Filter: filter}, nil
}

QuantileAgg <- "quantile(" _ field:Variable _  weight:("," _ Variable)? _ "," _ qth:Float _ args:("," _ FilterMulti)? _ ")" _ alias:AliasG? {

    var name string
    var filter Filter
    var err error

    if args != nil {
        if ags := cast.ToIfaceSlice(args); ags != nil {
            name, filter, err = parseAggArgs(alias, ags[2])
        }
    } else {
        name, filter, err = parseAggArgs(alias, nil)
    }

    if err != nil {
        return nil, err
    }

    wt := ""
    if weight != nil {
        w := cast.ToIfaceSlice(weight)
        wt, _ = cast.TryString(w[2])
    }

    q, _ := cast.TryFloat(qth)

    fld, _ := cast.TryString(field)
    return Quantile{Alias: name, Field: fld, Filter: filter, Weight: wt, Qth: q}, nil
}

MedianAgg <- "median(" _ field:Variable _  weight:("," _ Variable)? _ args:("," _ FilterMulti)? _ ")" _ alias:AliasG? {

    var name string
    var filter Filter
    var err error

    if args != nil {
        if ags := cast.ToIfaceSlice(args); ags != nil {
            name, filter, err = parseAggArgs(alias, ags[2])
        }
    } else {
        name, filter, err = parseAggArgs(alias, nil)
    }

    if err != nil {
        return nil, err
    }

    wt := ""
    if weight != nil {
        w := cast.ToIfaceSlice(weight)
        wt, _ = cast.TryString(w[2])
    }

    if name == "" {
        name = "median"
    }

    fld, _ := cast.TryString(field)
    return Quantile{Alias: name, Field: fld, Filter: filter, Weight: wt, Qth: float64(0.5)}, nil
}

QuartileAgg <- "quartile(" _ field:Variable _  weight:("," _ Variable)? _ "," _ qth:Number _ args:("," _ FilterMulti)? _ ")" _ alias:AliasG? {

    var name string
    var filter Filter
    var err error

    if args != nil {
        if ags := cast.ToIfaceSlice(args); ags != nil {
            name, filter, err = parseAggArgs(alias, ags[2])
        }
    } else {
        name, filter, err = parseAggArgs(alias, nil)
    }

    if err != nil {
        return nil, err
    }

    wt := ""
    if weight != nil {
        w := cast.ToIfaceSlice(weight)
        wt, _ = cast.TryString(w[2])
    }

    q, _ := cast.TryInt(qth)
    if q < 1 || q > 4 {
        log.Panic("Quartile must be in range (1, 4)")
    }

    if name == "" {
        if trail, ok := posMap[int(q)]; ok {
            name = fmt.Sprintf("%v%s quartile", q, trail)
        } else {
            name = fmt.Sprintf("%vth quartile", q)
        }
    }

    qn := float64(q) * 0.25
    if qn > 1 {
        qn = float64(1)
    }

    fld, _ := cast.TryString(field)
    return Quantile{Alias: name, Field: fld, Filter: filter, Weight: wt, Qth: qn}, nil
}

CovAgg <- "cov(" _ field1:Variable _ "," _ field2:Variable _ args:("," _ FilterMulti)? _ ")" _ alias:AliasG? {

    var name string
    var filter Filter
    var err error

    if args != nil {
        if ags := cast.ToIfaceSlice(args); ags != nil {
            name, filter, err = parseAggArgs(alias, ags[2])
        }
    } else {
        name, filter, err = parseAggArgs(alias, nil)
    }

    if err != nil {
        return nil, err
    }

    fld1, _ := cast.TryString(field1)
    fld2, _ := cast.TryString(field2)
    return Covariance{Alias: name, Field1: fld1, Field2: fld2, Filter: filter}, nil
}

CorrAgg <- "correlation(" _ field1:Variable _ "," _ field2:Variable _ args:("," _ FilterMulti)? _ ")" _ alias:AliasG? {

    var name string
    var filter Filter
    var err error

    if args != nil {
        if ags := cast.ToIfaceSlice(args); ags != nil {
            name, filter, err = parseAggArgs(alias, ags[2])
        }
    } else {
        name, filter, err = parseAggArgs(alias, nil)
    }

    if err != nil {
        return nil, err
    }

    fld1, _ := cast.TryString(field1)
    fld2, _ := cast.TryString(field2)
    return Correlation{Alias: name, Field1: fld1, Field2: fld2, Filter: filter}, nil
}

PValueAgg <- "pvalue(" _ field1:Variable _ "," _ field2:Variable _ args:("," _ FilterMulti)? _ ")" _ alias:AliasG? {

    var name string
    var filter Filter
    var err error

    if args != nil {
        if ags := cast.ToIfaceSlice(args); ags != nil {
            name, filter, err = parseAggArgs(alias, ags[2])
        }
    } else {
        name, filter, err = parseAggArgs(alias, nil)
    }

    if err != nil {
        return nil, err
    }

    fld1, _ := cast.TryString(field1)
    fld2, _ := cast.TryString(field2)
    return PValue{Alias: name, Field1: fld1, Field2: fld2, Filter: filter}, nil
}

// Alias Grammar

AliasG <- _ "as" _ alias:Variable {
    if name, ok := cast.TryString(alias); ok {
        return name, nil
    }
    return nil, errors.New("Could not decode alias")
}
